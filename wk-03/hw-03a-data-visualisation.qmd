---
title: "Homework Exercise - Data Visualisation"
format: html
execute:
  echo: true
  warning: false
editor: visual
editor_options: 
  chunk_output_type: console
---

# Task 0: Load R packages

1.  Add a new code-chunk below the three outlined steps for Task 0

2.  Load the `gapminder`, `ggplot2`, and `dplyr` R Packages using the `library()` function

3.  Run the code contained in the code-chunk and fix any errors

<!--# Remove this comment and add a new code-chunk -->

# Task 1: Data import

We are not importing any external data, we will use data from the `gapminder` R Package. The step of "Data import" is listed to remind us of this step in the data science lifecycle.

# Task 2: Data tidying

The data is tidy and we can directly work with it. The step is here as reminder.

# Task 3: Data transformation

## Data for 2007

**Fill in the gaps**

1.  A code-chunk has already been created

2.  Start with the `gapminder` object

3.  Add the pipe operator (`|>`) and on a new line use the `filter()` function to narrow down the data for observation of the year 2007

4.  Use the assignment operator (`<-`) to assign the data to an object named `gapminder_yr_2007`

5.  Run the code contained in the code-chunk and fix any errors

6.  Next to the code-chunk option `#| eval:` change the value from `false` to `true`

7.  Render the document and fix any errors

```{r}
#| eval: false

___ <- ___ |> 
  ___(___ == ___)
```

## Median life expectancy and country frequency by continent

**Fill in the gaps**

1.  A code-chunk has already been created

2.  Start with the `gapminder_yr_2007` object

3.  Add the pipe operator (`|>`) and on a new line use the `group_by()` function to group the following operations by the variable continent.

4.  Add the pipe operator (`|>`) and on a new line use the `summarise()` function to summarise the data for frequency and the median life expectancy.

5.  Use the assignment operator (`<-`) to assign the data to an object named `gapminder_summary_continent_2007`

6.  Run the code contained in the code-chunk and fix any errors

7.  Next to the code-chunk option `#| eval:` change the value from `false` to `true`

8.  Render the document and fix any errors

```{r}
#| eval: false

gapminder_summary_continent_2007 <- gapminder_yr_2007 |> 
  ___(___) |> 
  ___(
    count = n(),
    lifeExp = median(___)
  )

```

## Median life expectancy by continent and year

**Fill in the gaps**

1.  A code-chunk has already been created

2.  Start with the `gapminder` object

3.  Add the pipe operator (`|>`) and on a new line use the `group_by()` function to group the following operations by the variables continent and year.

4.  Add the pipe operator (`|>`) and on a new line use the `summarise()` function to summarise the data for the median life expectancy and name the new colum 'lifeExp'.

5.  Use the assignment operator (`<-`) to assign the data to an object named `gapminder_summary_continent_year`

6.  Run the code contained in the code-chunk and fix any errors

7.  Next to the code-chunk option `#| eval:` change the value from `false` to `true`

8.  Render the document and fix any errors

```{r}
#| eval: false

gapminder_summary_continent_year <- gapminder |>
  ___(continent, ___) |> 
  summarise(___ = ___(___))

```

# Task 4: Data visualisation

Thank you for working through the previous tasks. I am convinced that you have done a great job, but because my task descriptions aren't always unambiguous, I have imported the data that I would have expected to be created and stored in `gapminder_yr_2007`, `gapminder_summary_continent_2007` and `gapminder_summary_continent_year` at the previous code-chunks. This is to ensure that you can work through the following tasks.

1.  Run the code contained in the code-chunk

```{r}

library(readr)

gapminder_yr_2007 <- read_rds(here::here("wk-02/data/gapminder-yr-2007.rds"))

gapminder_summary_continent_2007 <- read_rds(here::here("wk-02/data/gapminder-summary-continent-2007.rds"))

gapminder_summary_continent_year <- read_rds(here::here("wk-02/data/gapminder-summary-continent-year.rds"))

```

## Boxplot

1.  Add a new code-chunk below

2.  Use the `ggplot()` function and the `gapminder_yr_2007` object to create a boxplot with the following aesthetic mappings:

-   continent to the x-axis;
-   life expactancy to the y-axis;
-   continent to color using the `fill = continent` argument inside `aes()`

3.  Do not display (ignore) the outliers in the plot. **Note: Use a search engine to find the solution and add the link to the solution you have found.**

4.  Run the code contained in the code-chunk and fix any errors

5.  What are the data types of the three variables used for aesthetic mappings? **Reminder: Lecture slide: https://cven5837-ss22.github.io/website/slides/lec-02-visualisation.html#/types-of-variables**

## Timeseries plot

1.  Add a new code-chunk below

2.  Use the `ggplot()` function and the `gapminder_summary_continent_year` object to create a connected scatterplot (also called timeseries plot) using the `geom_line()` and `geom_point()`functions with the following aesthetic mappings:

-   year to the x-axis;
-   life expactancy to the y-axis;
-   continent to color using the `color = continent` argument inside `aes()`

3.  Run the code contained in the code-chunk and fix any errors

## Barplot

### with `geom_col()`

1.  Add a new code-chunk below

2.  Use the `ggplot()` function and the `gapminder_summary_continent_2007` object to create a barplot using the `geom_col()` function with the following aesthetic mappings:

-   continent to the x-axis;
-   count to the y-axis;

3.  Run the code contained in the code-chunk and fix any errors

### with `geom_bar()`

1.  Add a new code-chunk below

2.  Use the `ggplot()` function and the `gapminder_yr_2007` object to create a barplot using the `geom_bar()` function with the following aesthetic mappings:

-   continent to the x-axis;

3.  Run the code contained in the code-chunk and fix any errors

4.  The plot is identical to the plot created with `geom_col()`. Why? What does the `geom_bar()` function do? Write your text here:

## Histogram

1.  Add a new code-chunk below

2.  Use the `ggplot()` function and the `gapminder_yr_2007` object to create a histogram using the `geom_histogram()` function with the following aesthetic mappings:

-   life expactancy to the x-axis;
-   continent to color using the `fill = continent` argument inside `aes()`

3.  Run the code contained in the code-chunk and fix any errors.

4.  Inside the `geom_histogram()` function, add the following arguments and values:

-   `col = "grey30"`
-   `breaks = seq(40, 85, 2.5)`

5.  Run the code contained in the code-chunk and fix any errors.

6.  Describe how the `geom_histogram()` function is similar to the `geom_bar()` function.

7.  What happens by adding the 'breaks' argument? Play around with the numbers inside of `seq()` to see what changes. Describe what you observe here:

## Scatterplot and faceting

1.  Use the `ggplot()` function and assign `gapminder_yr_2007` to the data argument and create a scatterplot using the `geom_point()`function with the following aesthetic mappings:

-   gdpPercap the x-axis;
-   lifeExp to the y-axis;
-   population to the size argument;
-   country to color using the `color = continent` argument inside `aes()`

2.  Run the code contained in the code-chunk and fix any errors

3.  Use the variable continent to facet the plot by adding: `facet_wrap(~continent)`

4.  Run the code contained in the code-chunk and fix any errors

5.  Describe in your own words what the `facet_wrap()` function does

6.  Adapt the scaling of the size by adding `scale_size(range = c(2, 12))` on the next line

7.  Run the code contained in the code-chunk and fix any errors.

8.  Adapt the scaling of the x-axis to log10 by adding `scale_x_log10(labels = scales::label_log(), limits = c(100, 100000))` on the next line

9.  Run the code contained in the code-chunk and fix any errors

## Lineplot and faceting

1.  A code-chunk with complete code has already been prepared

2.  Run the code contained in the code-chunk and fix any errors

3.  Remove the '#' sign at the line that starts with the `scale_color_manual()` function

4.  What is stored in the `country_colors` object? Find out by executing the object in the Console (type it to the Console and hit enter). Do the same again, but with a question mark `?country_colors`.

5.  Next to the code-chunk option `#| eval:` change the value from `false` to `true`

6.  Render the document and fix any errors

```{r}
#| eval: false

ggplot(data = gapminder,
       mapping = aes(x = year, 
                     y = lifeExp, 
                     group = country, 
                     color = country)) +
  geom_line(lwd = 1, show.legend = FALSE) + 
  facet_wrap(~continent) +
  # scale_color_manual(values = country_colors) +
  theme_minimal() 

```

## Choropleth Maps

You can also prepare maps with `ggplot2`. It's beyond the scope of the class to teach you the foundations of spatial data in R, but a popular package to work with spatial data is the `sf` (Simple Feautures) R Package. The `rnaturalearth` R Package facilitates world mapping by making [Natural Earth](https://www.naturalearthdata.com/) map data more easily available to R users.

The code-chunk below contains code that for a world map that shows countries by income group. To view the map, do the following:

1.  Install the `sf` and the `rnaturalearth` R Packages. **Hint: Use the install.packages() function in the Console**

2.  Load the R Packages using the `library()` at the beginning of this file alongside the other loaded R Packages.

3.  Run the code contained in the code-chunk and fix any errors

4.  Next to the code-chunk option `#| eval:` change the value from `false` to `true`

5.  Render the document and fix any errors

```{r}
#| eval: false

world <- ne_countries(scale = "small", returnclass = "sf")

world |> 
  mutate(income_grp = factor(income_grp, ordered = T)) |> 
  ggplot() + 
  geom_sf(aes(fill = income_grp)) +
  theme_void() +
  theme(legend.position = "top") +
  labs(fill = "Income Group:") +
  guides(fill = guide_legend(nrow = 2, byrow = TRUE))


```

The code for the code-chunk is taken from here: More here: https://bookdown.org/alhdzsz/data_viz_ir/maps.html

## Working with spatial data in R

If you are interested in working with spatial data in R, then I recommend the following resources for further study:

-   Geocompuation with R - Book: https://geocompr.robinlovelace.net/
-   Simple Features for R - Article: https://r-spatial.github.io/sf/articles/sf1.html
-   tmap: thematic maps in R - R Package: https://r-tmap.github.io/tmap/

# Task 5: Data communication

**In the YAML header (between the three dashes at the top of the document)**

1.  Add your name as the author of this document
2.  Add the date of today
3.  Change the format of the document to PDF
4.  Add a table of contents
5.  Render the document and fix any errors

# Task 6: Complete assignment

1.  Open the 'Files' tab in the bottom right window
2.  Navigate to the generated PDF: `wk-02/hw-02-data-visualisation.pdf`
3.  Tick the box next to the PDF file
4.  Click on 'More' (the blue gear icon) in the menu bar above the file manager
5.  Click on 'Export' and download the PDF file
6.  Send the PDF by email to the course instructor
